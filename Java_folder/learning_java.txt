learning java

current version Java SE 8
JDK Alpha and Beta (1995)
JDK 1.0 (23rd Jan, 1996)
JDK 1.1 (19th Feb, 1997)
J2SE 1.2 (8th Dec, 1998)
J2SE 1.3 (8th May, 2000)
J2SE 1.4 (6th Feb, 2002)
J2SE 5.0 (30th Sep, 2004)
Java SE 6 (11th Dec, 2006)
Java SE 7 (28th July, 2011)
Java SE 8 (18th March, 2014)

Java buzzwords- features
    Simple
    Object-Oriented
    Portable
    Platform independent
    Secured
    Robust
    Architecture neutral
    Dynamic
    Interpreted
    High Performance
    Multithreaded
    Distributed

downloading Java SDK
https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04

to compile it 
javac [source file].java

to execute
java [main class]

basically what happens is
	classes are in a .java file
	when complied they make all the classes inside .java 
	the classes are complied and executables are .class
	run each class as needed

also can use as main
public static void main(String[] args)  
public static void main(String []args)  
public static void main(String args[])  
public static void main(String... args)  
static public void main(String[] args)  
public static final void main(String[] args)  
final public static void main(String[] args)  
final strictfp public static void main(String[] args) 

JVM 
	Java Virtual Machine
	abstract  machine - specification that provides runtime environment in which java bytecod
	e can be executed
	
	
JRE
	
	Java Runtime Environment
	used to provide runtime enviorment and is helped with libraries

JDK
	Java Development Kit
	Contains JRE and development tools

JVM inside JRE inside JDK

Java Variables
	local variable
	variable which is declared inside the method

	instance variable
	variable which is declared inside the class but outside the method, is called instance 
	variable

	static variable
	a variable that has a universal scope which cannot be local

Java Data Types
	

	Primitive
		boolean    false    1 bit
	Numeric
		char       '\u0000' 2 byte	
	Integral
		Integer
			byte     0      1 byte
			short    0      2 byte
			int      0      4 byte
			long     0L     8 byte
		Floating-Point
			float    0.0f   4 byte
			double   0.0d   8 byte
	Non-Primitive   

	--when a Floating-point number has a fraction value, you must use f like 10.5f to 
	indicate to the complier that it is such a number
	-- when adding byte numbers do 
	byte a=10;  
	byte b=10; 	
	byte c=(byte)(a+b);

Unicode 
	universal but not completely compatbilite some characters use different bytes

Java Operator Precedence
    Unary	postfix	                expr++ expr--
                prefix	                ++expr --expr +expr -expr ~ !
    Arithmetic	multiplicative	        * / %
                additive	            + -
    Shift	    shift	                << >> >>>
    Relational	comparison	            < > <= >= instanceof
    equality	                        == !=
    Bitwise	    bitwise AND	            &
                bitwise exclusive OR	^
                bitwise inclusive OR	|
    Logical	    logical AND	            &&
                logical OR	            ||
    Ternary	    ternary	                ? :
    Assignment	assignment	            = += -= *= /= %= &= ^= |= <<= >>= >>>=	
	
	--(x++) (x--) will change the number but print the orginal number
	--(++x) (--x) will change the number to its final result along with any changes the 
	  previous note
	-- ~ on a number when negate it and subtract one from it
	--order of operations follows PEMDAS
	--when you do left shift on an operatiors [number] << [x] what happens is
	  [number] * 2 ^ 2
	--when you do right shift on an operatiors [number] << [x] what happens is
        -- [number] / 2 ^ 2 
 	-- logical
	   int a=10;  
	   int b=5;  
	   int c=20; 

	   for logical AND OR
	   a<b&&a++<c
	   a>b||a++<c
	   
	   a still equals ten

	   for bitwise AND OR
	   a>b&a++<c
	   a>b|a++<c
	
	   a will equal 11	
	--short
	  short a=10;  
	  short b=10;
	  
	  always use assignment operators not arithmetic operators or
	  (short)([arithmetic expression])
	  
Java Conditonal
	if else works the same when doing multiple if else its if 
        if 
	if else 	
	...
	else

Java Switch
	
	--same thing
	--case must be int only works with cases
	--if you do not put a break it would execute all the cases after it along with the default

Java For Loop

	Java For Each Loop
		
		[Type] [var]:[array]
	
	Java Labeled For Loop

		[loop_name]:
			for(int i =0; [conditonal]; [conuter])
		
	Java Infinitive For Loop

		for(;;)	
	--for is same
	-- to break a labeled for loop
	-- break [label]:

Java While Loop

	--same typical thing
	--infinite while loop is the same

Java do-while Loop
	
	--SAME typical thing
	-- infinte loop is same too

Java Break Statement
	
	--same typical thing

Java Continue Statement
	
	--same typeical thing

Java Comments

	//This is single line comment  
	
        /* 
        This  
        is  
        multi line  
        comment 
        */  

        /** 
        This  
        is  
        documentation  
        comment 
        */  

	--if a file has a doc comment do
	  javac [file].java
	  javadoc [file].java

Java OOPs Concepts
	
Java Naming conventions
	
    class name	        should start with uppercase letter and be a noun e.g. String, Color, Button, System, Thread etc.
    
    interface name	should start with uppercase letter and be an adjective e.g. Runnable, Remote, ActionListener etc.
    
    method name	        should start with lowercase letter and be a verb e.g. actionPerformed(), main(), print(), println() etc.
    
    variable name	should start with lowercase letter e.g. firstName, orderNumber etc.
    
    package name	should be in lowercase letter e.g. java, lang, sql, util etc.
    
    constants name	should be in uppercase letter. e.g. RED, YELLOW, MAX_PRIORITY etc.		
	--Java follows camelcase syntax for naming the class, interface, method and variable.
	  [firstwordSecondword]

Java Objects and Classes

	--The new keyword is used to allocate memory at run time. All objects get memory in Heap memory area.

Java Constructor
	
	--a method
	--Constructor name must be same as its class name
	--Constructor must have no explicit return type


	Default Constructor
	
		[class_name>](){System.out.println("Object is created")}  

		-- If there is no constructor in a class, compiler automatically creates a default constructor.

	
	Java parameterized constructor

