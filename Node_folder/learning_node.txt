learning Node
Node.js = Runtime Environment + JavaScript Library
	
	Node.js Features
	
		--Extremely fast: Node.js is built on Google Chrome's V8 JavaScript Engine,
		--I/O is Asynchronous and Event Driven: All APIs of Node.js library are
		asynchronous i.e. non-blocking. So a Node.js based server never waits for an API		 to return data.
		--Single threaded: Node.js follows a single threaded model with event looping.
		--Highly Scalable: Node.js is highly scalable because event mechanism helps the
		server to respond in a non-blocking way.
        --No buffering:  Node.js applications never buffer any data. These applications simply output the data in chunks.
        --Open source:
        --License: Node.js is released under the MIT license.

    Node Program

        node.js files must be .js files and to run a program
            node [file].js

        Node.js web-based Example
            
            Import required modules:
            
                var http = require("http");
    
            then
            Create server:
    
                http.createServer(function (request, response) {
                   response.writeHead(200, {'Content-Type': 'text/plain'});
                   response.end('Hello World\n');
                }).listen(8081);
                console.log('Server running at http://127.0.0.1:8081/');
    
    
            Read request and return response:
                but here were just doing a console.log, javascript would help us here
    
            to get it going
                type node [file].js
                then go to http://127.0.0.1:8081 or the name of the computer: 8081 if you
                are using a remote connection and "Hello World" should appear
    
    Node Console
        
        
        console.log is the print statement in node
        
        console.log()
            console.log('Hello JavaTpoint');

            var x = 0
            console.log("this is x" + x);
    
        console.error()
            console.error(new Error('Hell! This is a wrong method.'));
        
        console.warn()
            const name = 'John';
            console.warn(`Don't mess with me ${name}! Don't mess with me!`);



        --similar to .js console.log but not the same
    
    Node.js REPL

        
        REPL is this REPL enviornments
        READ, EVAL, PRINT, LOOP

        to start it just type node on cmd

        ctrl + c	It is used to terminate the current command.
        ctrl + d	It terminates the node repl.
        up/down keys	It is used to see command history and modify previous commands.
        tab keys	It specifies the list of current command.
        .help	It specifies the list of all commands.
        .break	It is used to exit from multi-line expressions.
        .save filename	It saves current node repl session to a file.
        .load filename	It is used to load file content in current node repl session.
        
        Node.js Simple expressions
            follow the pemdas rule

        Node.js variables
            if u use var it would store the result
            else it would store and print the result
            > a= 5
            5
            > var b= 2
            undefined
            > a+b
            7

        Node.js Multiline expressions
            >var x = 0
            undefined
            > do {
            ... x++;
            ... console.log("x: " + x);
            ... } while ( x < 10 );
            would print x : 1- 10 then undefined at the bottom


Node.js Package Manager   (NPM!!)

    --refer to info found in learning_npm
    --It provides online repositories for node.js packages/modules which are searchable on search.nodejs.org also provides utility to install packages
    --npm comes with node.js versions 0.6.3 and greater

Node.js Command Line Options

    	-v, --version	It is used to print node's version.
    	-h, --help	It is used to print node command line options.
    	-e, --eval "script"	another way to use node REPL
    	-p, --print "script"	It is identical to -e but prints the result.
    	-c, --check	Syntax check the script without executing.
    	-i, --interactive	It opens the REPL even if stdin does not appear to be a terminal.
    	-r, --require module	It is used to preload the specified module at startup. It follows require()'s module resolution rules. Module may be either a path to a file, or a node module name. basically repl a file that includes require
                //deprecation means disapproval or error warning by node complier
    	--no-deprecation	Silence deprecation warnings.
    	--trace-deprecation	It is used to print stack traces for deprecations.
    	--throw-deprecation	It throws errors for deprecations.
    	--no-warnings	It silence all process warnings (including deprecations).
    	--trace-warnings	It prints stack traces for process warnings (including deprecations).
    	--trace-sync-io	It prints a stack trace whenever synchronous i/o is detected after the first turn of the event loop.
    	--zero-fill-buffers	Automatically zero-fills all newly allocated buffer and slowbuffer instances.
        --track-heap-objects	It tracks heap object allocations for heap snapshots.
    	--prof-process	It processes V8 profiler output generated using the v8 option --prof.
    	--V8-options	It prints V8 command line options.
        --tls-cipher-list=list	It specifies an alternative default tls cipher list. (requires node.js to be built with crypto support. (default))
    	--enable-fips	It enables fips-compliant crypto at startup. (requires node.js to be built with ./configure --openssl-fips)
    	--force-fips	It forces fips-compliant crypto on startup. (cannot be disabled from script code.) (same requirements as --enable-fips)
        --icu-data-dir=file	It specifies ICU data load path. (Overrides node_icu_data)

Node.js Global Objects
    --come automatically with any application that runs node

    Node.js __dirname
        
        console.log(__dirname)
        --prints current directory of file
        
    Node.js __filename
        console.log(__filename);
        -- prints out directory along with file

    --console ,buffer, and timer , processare also global


Node.js OS
    --commads that interact with the OS
os.arch()	                This method is used to fetch the operating system CPU architecture.
os.cpus()                   This method is used to fetch an array of objects containing                                      information about each cpu/core installed: model, speed (in MHz),                                and times (an object containing the number of milliseconds the                                   cpu/core spent in: user, nice, sys, idle, and irq).
os.endianness()	            This method returns the endianness of the cpu. Its possible values                               are 'BE' for big endian or 'LE' for little endian.
os.freemem()	            This methods returns the amount of free system memory in bytes.
os.homedir()	            This method returns the home directory of the current user.
os.hostname()               This method is used to returns the hostname of the operating                                     system.
os.loadavg()	            This method returns an array containing the 1, 5, and 15 minute                                  load averages. The load average is a time fraction taken by system                               activity, calculated by the operating system and expressed as a                                  fractional number.
os.networkinterfaces()	    This method returns a list of network interfaces.
os.platform()	            This method returns the operating system platform of the running                                 computer i.e.'darwin', 'win32','freebsd', 'linux', 'sunos' etc.
os.release()	            This method returns the operating system release.
os.tmpdir()	                This method returns the operating system's default directory for                                 temporary files.
os.totalmem()	            This method returns the total amount of system memory in bytes.
os.type()	                This method returns the operating system name. For example 'linux'                               on linux, 'darwin' on os x and 'windows_nt' on windows.
os.uptime()	                This method returns the system uptime in seconds.
os.userinfo([options])	    This method returns a subset of the password file entry for the                                  current effective user.

Node.js Timer

    setImmediate(): It is used to execute setImmediate.
    
     setInterval():
        use
        setInterval(function() {
            [executable]
            }, [interval in milliseconds] )
        --its using a different counter to counter milliseconds so its not perfect

        setTimeout():
        use
        setTimeout(function() {
            console.log("setTimeout: Hey! 1000 millisecond completed!..");
        }, 1000);

    --replace set with clear in front all the methods they stop the loop for interval and cancel
    the timeout for timeout but the set function has to be placed in an object which is a parameter needed for the clear function

    var process = [set method] ([executable],[time number]);
    [clear method](process);

Node.js Errors

    Standard JavaScript errors i.e. <EvalError>, <SyntaxError>, <RangeError>, <ReferenceError>, <TypeError>, <URIError> etc.
    System errors
    User-specified errors
    Assertion errors

Node.js DNS
        
    --The Node.js DNS module contains methods to get information of given hostname.
    dns.getServers()
    dns.setServers(servers)
    dns.lookup(hostname[, options], callback)
    dns.lookupService(address, port, callback)
    dns.resolve(hostname[, rrtype], callback)
    dns.resolve4(hostname, callback)
    dns.resolve6(hostname, callback)
    dns.resolveCname(hostname, callback)
    dns.resolveMx(hostname, callback)
    dns.resolveNs(hostname, callback)
    dns.resolveSoa(hostname, callback)
    dns.resolveSrv(hostname, callback)
    dns.resolvePtr(hostname, callback)
    dns.resolveTxt(hostname, callback)
    dns.reverse(ip, callback)

Node.js Net
    for socket programming
    --gotta match port for sucessful connection

Node.js Crypto
    --The Node.js Crypto module supports cryptograpy
    --based on cryptographic functionality that includes a set of wrappers for open SSL's hash HMAC, cipher, decipher, sign and verify functions.
    --HMAC stands for Hash-based Message Authentication Code. It is a process for applying a hash algorithm to both data and a secret key that results in a single final hash.
    --hmac, cipher and decipher was used in the hmac functions

Node.js TLS/SSL
    TLS stands for Transport Layer Security
    next in line after SSL (Secure Sockets Layer)
    
    public-key cryptography
    
    WHAT YOU NEED TO KNOW
    BASICALLY THE CLIENT AND THE SERVER HAS EACH HAS A PRIVATE KEY AND A PUBLIC KEY. EVERYONE KNOWS ABOUT THE PUBLIC KEY BUT ONLY THE HOST KNOWS ABOUT THE PUBLIC KEY

    TO ENCRYPT A MESSAGE THE SENDER REQUIRES ITS PRIVATE KEY AND THE RECIPIENT PUBLIC KEY
    
    TO DECRPYT A MESSAGE THE RECIPIENT NEEDS THE SENDERS PRIVATE KEY

    use require('tls'); to access

    to generate a private key
        openssl genrsa -out ryans-key.pem 1024
    
    all servers and some clients need a certificate
    certificate - public keys signed by certificate authority or by self
    to get create a CSR ( "Certificate Signing Request" ) file
    
        openssl req -new -key ryans-key.pem -out ryans-csr.pem
        fill out the information blank spaces left with .
        you will have a ryans-csr.pem fileand and a ryans-key.pem file

    to create self-signed certificate
        openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem
        
    099777b3e4b6153688c0ae3c70367b8b307591a2eb66e208484c43bb477a4e0389b20698bfa7938df835bf74afe2abacd9db038e3ec2575215610089689adbac1218d55b275527c95f03f7a368e20966497499bbd669d558b0ea0771f3f73c53072f37ad1ec71df2fbc4fd25a7c51a9bec46568bbde4be1a341b24e02ed398649ff6f8e1ba7058d5525a1fb4941b31f1

Node.js Debugger
    --Node.js provides a simple TCP based protocol and built-in debugging client.
    to use
        node debug [script.js | -e "script" | <host>:<port>]
    --if you make an error it will throw an  error

Node.js Process
    Node.js provides the facility to get process information
    global, instance of event emitter

    arch	    returns process architecture: 'arm', 'ia32', or 'x64'
    args	    returns commands line arguments as an array
    env	        returns user environment
    pid	        returns process id of the process
    platform	returns platform of the process: 'darwin', 'freebsd', 'linux', 'sunos' or 'win32'
    release	    returns the metadata for the current node release
    version	    returns the node version
    versions	returns the node version and its dependencies
    
    call by
    console.log(`Process [property]: ${[process].[property]}`);
    
    Node.js Process Functions
        Function	                    Description

        cwd()	                        returns path of current working directory
        hrtime()	                    returns the current high-resolution real time in a                                       [seconds, nanoseconds] array
        memoryUsage()	                returns an object having information of memory usage.
        process.kill(pid[, signal])	    is used to kill the given pid.
        uptime()	                    returns the Node.js process uptime in seconds.
        --uptime is how long a process has been running

Node.js Child Process

    Node.js child_process.exec() method
    --The child_process.exec() method runs a command in a console and buffers the output.
    
    use
        child_process.exec(command[, options], callback)
        1) command:  It specifies the command to run, with space-separated arguments.
        
        2) options:  It may contain one or more of the following options:
        
        cwd:         It specifies the current working directory of the child process.
        env:         It specifies environment key-value pairs.
        encoding:    String (Default: 'utf8')
        shell:       It specifies string Shell to execute the command with (Default: '/bin/sh' on              UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on                 UNIX or /s /c on Windows. On Windows, command line parsing should be                     compatible with cmd.exe.)
        timeout:     Number (Default: 0)
        maxBuffer:   Number (Default: 200*1024)
        killSignal:  String (Default: 'SIGTERM')
        uid Number:  Sets the user identity of the process.
        gid Number:  Sets the group identity of the process.
        
        callback:    The callback function specifies three arguments error, stdout and stderr                 which is called with the following output when process terminates.

        --you need an executable to work with when using the child_process functions
        --to use an executable put ./ in front to let linux OS know that its execuatable
    
    files support.js and master.js
    run master.js

    Node.js child_process.spawn() method
        --The child_process.spawn() method launches a new process with a given command. This method returns streams (stdout & stderr) and it is generally used when the process returns large amount of data.
        use
            child_process.spawn(command[, args][, options])
            1) command:         It specifies the command to run.
            
            2) args:            It specifies an array List of string arguments.
            
            3) options:         It may contain one or more of the following options:
            
            cwd:                It specifies the current working directory of the child process.
            env:                It specifies environment key-value pairs.
            stdio:              Array|String Child's stdio configuration
            customFds:          Array Deprecated File descriptors for the child to use for stdio
            detached Boolean :  The child will be a process group leader
            uid Number:         Sets the user identity of the process.
            gid Number:         Sets the group identity of the process.

            files:
            support.js and other_master.js
            run other_master.js

    child_process.fork() method
        --The child_process.fork method is a special case of the spawn() to create Node processes. This method returns object with a built-in communication channel in addition to having all the methods in a normal ChildProcess instance.
        use
            child_process.fork(modulePath[, args][, options])
            1) modulePath: This is a string specifies the module to run in the child.
            
            2) args: It specifies an array List of string arguments.
            
            3) options: It may contain one or more of the following options:
            
            cwd:        It specifies the current working directory of the child process.
            env:        It specifies environment key-value pairs.
            execPath:   This is a string Executable used to create the child process.
            execArgv:   It specifies Array List of string arguments passed to the executable                   (Default: process.execArgv).
            silent:     It specifies Boolean If true, stdin, stdout, and stderr of the child will             be piped to the parent, otherwise they will be inherited from the                    parent, see the "pipe" and "inherit" options for spawn()'s stdio for                 more details (default is false).
            uid Number: Sets the user identity of the process.
            gid Number: Sets the group identity of the process.

            files:
            support.js and other_master_fork.js
            run other_master_fork.js
            --shows more data when run in repl

Node.js Buffers
    --used to store raw data
    Node.js Creating Buffers
        Create an uninitiated buffer:
        use
            var buf = new Buffer(10);
        Create a buffer from array:
            var buf = new Buffer([10, 20, 30, 40, 50]);
        Create a buffer from string:
            var buf = new Buffer("Simply Easy Learning", "utf-8");

    Node.js Writing to buffers
        use
            buf.write(string[, offset][, length][, encoding])


            string: It specifies the string data to be written to buffer.
    
            offset: It specifies the index of the buffer to start writing at. Its default value is 0.

            length: It specifies the number of bytes to write. Defaults to buffer.length

            encoding: Encoding to use. 'utf8' is the default encoding.

            Return values from writing buffers:

            This method is used to return number of octets written. In the case of space shortage for buffer to fit the entire string, it will write a part of the string.

     Reading from buffers
        use
            buf.toString([encoding][, start][, end])

                encoding: It specifies encoding to use. 'utf8' is the default encoding
                
                start: It specifies beginning index to start reading, defaults to 0.
                
                end: It specifies end index to end reading, defaults is complete buffer.
                
                Return values reading from buffers:

                This method decodes and returns a string from buffer data encoded using the specified character set encoding.

Node.js Streams
    streams are objects that make it easier for u to read and write from another place

    Readable: This stream is used for read operations.
    Writable: This stream is used for write operations.
    Duplex: This stream can be used for both read and write operations.
    Transform: It is type of duplex stream where the output is computed according to input.

    Event Emitter
        Data:This event is fired when there is data available to read.
        End:This event is fired when there is no more data available to read.
        Error: This event is fired when there is any error receiving or writing data.
        Finish:This event is fired when all data has been flushed to underlying system.

    Reading from stream
        files
        stream_input.txt
        read_file.js
        run read_file.js

    Writing to stream
        files
        stream_output.txt
        write_to_file.js
        run write_to_file.js

    Piping Streams
        send stuff from an input file to an output file
        files
        pipe_stream.js
        
    Chaining Streams
        basically compress a stream
        files
        chain_stream.js

    decompress streams
        files
        decompress.js

Node.js File System (FS)
    --In Node.js, file I/O is provided by simple wrappers around standard POSIX functions.
    use

    var fs = require("fs")
    
     FS Reading File
     --Asynchronous methods take a last parameter as completion function callback
     --never blocks program execution unlike sychronous
    files
    FS_read_file.txt
    FS_read_file.js
    
    FS Open a file
        use
        fs.open(path, flags[, mode], callback)

        path: This is a string having file name including path.
        
        flags: Flag specifies the behavior of the file to be opened. All possible values have been mentioned below.
        
        mode: This sets the file mode (permission and sticky bits), but only if the file was created. It defaults to 0666, readable and writeable.
        
        callback: This is the callback function which gets two arguments (err, fd).
    
    Flags for Read/Write
        r	open file for reading. an exception occurs if the file does     not exist.
        r+	open file for reading and writing. an exception occurs if      the file does not exist.
        rs	open file for reading in synchronous mode.
        rs+	open file for reading and writing, telling the os to open      it synchronously. see notes for 'rs' about using this with     caution.
        w	open file for writing. the file is created (if it does not     exist) or truncated (if it exists).
        wx	like 'w' but fails if path exists.
        w+	open file for reading and writing. the file is created (if     it does not exist) or truncated (if it exists).
        wx+	like 'w+' but fails if path exists.
        a	open file for appending. the file is created if it does not     exist.
        ax	like 'a' but fails if path exists.
        a+	open file for reading and appending. the file is created if     it does not exist.
        ax+	open file for reading and appending. the file is created if     it does not exist
        files
            FS_open.js

    File Information Method
        use
        fs.stat(path, callback)
        Path: This is string having file name including path.

        Callback: This is the callback function which gets two arguments (err, stats) where stats is an object of fs.Stats type.

        stats.isFile()	           returns true if file type of a                                 simple file.
        stats.isDirectory()	       returns true if file type of a                                 directory.
        stats.isblockdevice()	   returns true if file type of a block                             device.
        stats.ischaracterdevice()  returns true if file type of a                                 character device.
        stats.issymboliclink()	   returns true if file type of a s                               symbolic  link.
        stats.isfifo()	           returns true if file type of a fifo.
        stats.issocket()	       returns true if file type of                                    asocket.

Node.js Path
    use
    var path =  require ("path")

	Method
    Description

	path.normalize(p)
    It is used to normalize a string path, taking care of '..' and '.' parts.
	path.join([path1][, path2][, ...])
    It is used to join all arguments together and normalize the resulting path.
	path.resolve([from ...], to)
    It is used to resolve an absolute path.
	path.isabsolute(path)
    It determines whether path is an absolute path. an absolute path will always resolve to the same location, regardless of the working directory.
    path.relative(from, to)
    It is used to solve the relative path from "from" to "to".
	path.dirname(p)
    It return the directory name of a path. It is similar to the unix dirname command
	path.basename(p[, ext])
    It returns the last portion of a path. It is similar to the Unix basename command.
	path.extname(p)
    It returns the extension of the path, from the last '.' to end of string in the last portion of the path. if there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string.
	path.parse(pathstring)
    It returns an object from a path string.
    path.format(pathobject)
    It returns a path string from an object, the opposite of path.parse above.

Node.js StringDecoder
    --buffer.toString() but provides extra support to UTF.
    import
    const StringDecoder = require('string_decoder').StringDecoder;

    two methods
    decoder.write(buffer)	It is used to return the decoded string.
    decoder.end()	        It is used to return trailing bytes, if any                         left in the buffer.
    refer to stringdeecoder_example1.js

Node.js Query String
    -- It can be used to convert query string into JSON object and vice-versa.
    --deals with query string
    methods

    querystring.parse('[key]=[value]&...')
    converts query string into JSON object.

    querystring.stringify([key]:[value],...)
    converts JSON object into query string.

Node.js ZLIB
    for zipping properties
    import
    const zlib = require('zlib');

    zipping
    files
    zlib_zip.js

Node.js Assertion Testing
    --simple way to write test
    --provides no feedback unless test fails
    --assert is not a testing framework and cannot be used as general purpose assertion library.
    --it is really that runtime error thrower where it is correct but not the desired result
    use
    var assert = require('assert');



Node.js V8
    --V8 is an open source JavaScript engine developed by the Chromium project for the Google Chrome web browser. It is written in C++. Now a days, it is used in many projects such as Couchbase, MongoDB and Node.js.
    import
    const v8 = require('v8');
    v8.getHeapStatistics()
    v8.getHeapSpaceStatistics()
    --Currently, by default v8 has a memory limit of 512mb on 32-bit and 1gb on 64-bit systems. You can raise the limit by setting --max-old-space-size to a maximum of ~1gb for 32-bit and ~1.7gb for 64-bit systems. But it is recommended to split your single process into several workers if you are hitting memory limits.

Node.js Callbacks
    --Callback is an asynchronous equivalent for a function. It is called at the completion of each task. In Node.js, callbacks are generally used. All APIs of Node are written in a way to supports callbacks. For example: when a function start reading file, it returns the control to execution environment immediately so that the next instruction can be executed.
    --In Node.js, once file I/O is complete, it will call the callback function. So there is no blocking or wait for File I/O. This makes Node.js highly scalable, as it can process high number of request without waiting for any function to return result.
    --basically functions complete at differnt times, callback controls which function is done first
    files
    all callback files

Node.js Events
    --node uses async functins to maintain sequentiality by using observer pattern
    -- Node thread keeps an event loop and after the completion of any task, it fires the corresponding event which signals the event listener function to get executed.
    
    Event Driven Programming
        --as soon as node starts the server it initiates and declares all objects and
          waits for an event to occur

    --main loop that listens for event and triggers a callback once events is detected
    --callbacks are async events work by observer waiting for an event

    use
    // Import events module
    var events = require('events');
    // Create an eventEmitter object
    var eventEmitter = new events.EventEmitter();

    bind event handler with an event
        eventEmitter.on('eventName', eventHandler);

    fire an event
        eventEmitter.emit('eventName');

    refer to event_example.js

    it makes a an object makes a reference string to be thrown, once it is caught event is executed
    --if you emit without catching nothing seems to happen

Node.js Punycode
    --converts utf-8 unicode to ascii since host names only understand ascii
    ex  mañana.com  not supported so xn--maana-pta.com instead
    -- comes with node 0.6.2 and later
    -- to install npm install punycode
    import
        punycode = require('punycode');
    
    methods
        punycode.decode([string}); decodes an ascii string to unicode
        
        punycode.encode([sting]); turns unicode to ascii

        punycode.toASCII([domain]); turns non-ascii to ascii

        punycode.toUnicode([domain])

Node.js TTY
    import
    var tty = require('tty');
    to see if node is running in terminal
        node -p -e "Boolean(process.stdout.isTTY)"

    Class readstream
        use process.stdin in replace of rs when inside tty
        rs.isRaw: It is a Boolean that is initialized to false. It specifies the current "raw" state of the tty.ReadStream instance.

        rs.setRawMode(mode): It should be true or false. It is used to set the properties of the tty.ReadStream to act either as a raw device or default. isRaw will be set to the resulting mode.
    
    Class writestream
        Resize event: This event is used when either of the columns or rows properties has changed.
    
        process.stdout.on('resize', () => {
        console.log('screen size has changed!');
        console.log(`${process.stdout.columns}x${process.stdout.rows}`);
            });

        refer to the tty_files

Node.js Web Module
    uses web severs basically a machine that returns what u get when you type something into a search bar

    Web Application Architecture
        Client Layer: The Client layer contains web browsers, mobile browsers or applications which can make HTTP request to the web server.
        Server Layer: The Server layer contains Web server which can intercepts the request made by clients and pass them the response.
        Business Layer: The business layer contains application server which is utilized by web server to do required processing. This layer interacts with data layer via data base or some external programs.
        Data Layer: The Data layer contains databases or any source of data.
        --when starting the server, make sure there is an index.html file in there so you
        can see it and it wont throw an erro

        files
        server.js